#!/usr/bin/env python3
"""
AIVIIZN REAL TERMINAL AGENT - WITH FIELD MAPPING
Creates BEAUTIFUL, FULLY FUNCTIONAL pages from target sites
Exactly like the original but with intelligent field detection
"""

import os
import sys
import json
import time
import re
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
from urllib.parse import urlparse, urljoin
import logging
from openai import AsyncOpenAI
import tempfile
import shutil

# Real libraries - no mocking
from playwright.async_api import async_playwright, Browser, Page
from supabase import create_client, Client
import anthropic
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# For Excel formula extraction
try:
    import openpyxl
except ImportError:
    openpyxl = None
    print("‚ö†Ô∏è openpyxl not installed - Excel formula extraction disabled")
    print("   Run: pip install openpyxl")

# Load environment
load_dotenv()

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/ianrakow/Desktop/AIVIIZN/agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AIVIIZNRealAgent:
    """
    REAL agent that creates BEAUTIFUL, FUNCTIONAL pages
    Everything actually works - no placeholders
    """
    
    def __init__(self):
        """Initialize with real connections"""
        print("üöÄ AIVIIZN REAL AGENT - BEAUTIFUL PAGE CREATOR")
        print("=" * 60)
        
        # Real Supabase connection
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_KEY') 
        self.supabase_anon_key = os.getenv('SUPABASE_KEY')
        self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
        print("‚úì Supabase connected")
        
        # Real Claude API
        self.anthropic_client = anthropic.Anthropic(
            api_key=os.getenv('ANTHROPIC_API_KEY')
        )
        print("‚úì Claude API ready (Opus 4.1)")
        
        # Initialize OpenAI client
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if openai_api_key:
            self.openai_client = AsyncOpenAI(api_key=openai_api_key)
            print(f"‚úì GPT-4o (Omni) connected")
        else:
            print("‚ö†Ô∏è OpenAI API key not found")
            self.openai_client = None
        
        # Get AIVIIZN company ID (there's only one)
        self.company_id = self.get_aiviizn_company_id()
        
        # Project paths
        self.project_root = Path("/Users/ianrakow/Desktop/AIVIIZN")
        self.templates_dir = self.project_root / "templates"
        self.static_dir = self.project_root / "static"
        
        # Target site settings - THIS IS WHAT WE'RE COPYING FROM
        self.target_base = "https://celticprop.appfolio.com"
        
        # State
        self.processed_pages = self.load_state("processed_pages.json", set())
        self.discovered_links = self.load_state("discovered_links.json", list())
        
        # Real browser instance (persistent)
        self.playwright = None
        self.browser: Optional[Browser] = None
        self.context = None
        self.page: Optional[Page] = None
        
        # Auto mode flag
        self.auto_mode = False
        
        print("‚úì Ready to create beautiful pages")
    
    def get_aiviizn_company_id(self):
        """Get the AIVIIZN company ID - hardcoded after database setup"""
        # Database has been properly set up with AIVIIZN company
        # Using the actual ID from the configured database
        return '5bb7db68-63e2-4750-ac16-ad15f19938a8'
        
        # Note: The database is already configured, no need to create company
        # If you want to verify it exists, uncomment below:
        """
        try:
            result = self.supabase.table('companies').select('id').eq('name', 'AIVIIZN').execute()
            if result.data:
                return result.data[0]['id']
            else:
                print("‚ùå AIVIIZN company not found - database needs setup!")
                return '5bb7db68-63e2-4750-ac16-ad15f19938a8'  # Fallback to known ID
        except Exception as e:
            print(f"‚ö†Ô∏è Error getting company ID: {e}")
            return '5bb7db68-63e2-4750-ac16-ad15f19938a8'  # Fallback to known ID
        """
    
    def load_state(self, filename: str, default):
        """Load state from file"""
        file_path = self.project_root / "data" / filename
        if file_path.exists():
            with open(file_path, 'r') as f:
                data = json.load(f)
                return set(data) if isinstance(default, set) else data
        return default
        
    def save_state(self):
        """Save current state"""
        data_dir = self.project_root / "data"
        data_dir.mkdir(exist_ok=True)
        
        with open(data_dir / "processed_pages